#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GiphyPingbacksSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC17GiphyPingbacksSDK9AdManager")
@interface AdManager : NSObject
+ (void)trackSeen:(NSArray<NSString *> * _Nullable)tags;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Action types. Must be Int so that it can be used in Objective-C.
typedef SWIFT_ENUM(NSInteger, GPHActionType, closed) {
  GPHActionTypeSeen = 0,
  GPHActionTypeHover = 1,
  GPHActionTypeClick = 2,
  GPHActionTypeSent = 3,
};

/// Action types. Must be Int so that it can be used in Objective-C.
typedef SWIFT_ENUM(NSInteger, GPHEventType, closed) {
  GPHEventTypeSearch = 0,
  GPHEventTypeTrending = 1,
  GPHEventTypeRelated = 2,
  GPHEventTypeExplore = 3,
  GPHEventTypeEmoji = 4,
  GPHEventTypeTextSearch = 5,
  GPHEventTypeTextTrending = 6,
};


/// Sub-classing Operation to make sure we manage its state correctly
SWIFT_CLASS("_TtC17GiphyPingbacksSDK25GPHPingbackAsyncOperation")
@interface GPHPingbackAsyncOperation : NSOperation
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface GPHPingbackAsyncOperation (SWIFT_EXTENSION(GiphyPingbacksSDK))
/// To handle KVO for ready state
@property (nonatomic, readonly, getter=isReady) BOOL ready;
/// To handle KVO for ready executing
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
/// To handle KVO for finished state
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
/// Override so we can claim to be async.
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
/// Override to manage the state correctly for async.
- (void)start;
/// Override to handle canceling so we can change the state to trigger KVO.
- (void)cancel;
@end


/// A specific type of async operation with a completion handler.
SWIFT_CLASS("_TtC17GiphyPingbacksSDK39GPHPingbackAsyncOperationWithCompletion")
@interface GPHPingbackAsyncOperationWithCompletion : GPHPingbackAsyncOperation
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Async Request Operations with Completion Handler Support
SWIFT_CLASS("_TtC17GiphyPingbacksSDK18GPHPingbackRequest")
@interface GPHPingbackRequest : GPHPingbackAsyncOperationWithCompletion
/// Override the Operation function main to handle the request
- (void)main;
@end

enum GPHRequestType : NSInteger;
@class NSURLResponse;

/// GIPHY Abstract API Client.
SWIFT_CLASS("_TtC17GiphyPingbacksSDK26GPHPingbacksAbstractClient")
@interface GPHPingbacksAbstractClient : NSObject
/// Giphy API key.
@property (nonatomic, copy) NSString * _Nullable _apiKey;
/// Giphy User Id.
@property (nonatomic, copy) NSString * _Nullable _userId;
/// Default timeout for network requests. Default: 10 seconds.
@property (nonatomic) NSTimeInterval timeout;
/// Network reachability status. Not supported in watchOS.
@property (nonatomic) BOOL useReachability;
/// Encode Strings for appending to URLs for endpoints like Term Suggestions/Categories
/// \param string String to be encoded.
///
///
/// returns:
/// A cancellable operation.
- (NSString * _Nonnull)encodedStringForUrl:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Perform a request
/// \param request URLRequest
///
/// \param type GPHRequestType to figure out what endpoint to hit
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)httpRequestWith:(NSURLRequest * _Nonnull)request type:(enum GPHRequestType)type completionHandler:(void (^ _Nonnull)(NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
/// Perform a request post data
/// \param request URLRequest
///
/// \param type GPHRequestType to figure out what endpoint to hit
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)postRequestWith:(NSURLRequest * _Nonnull)request type:(enum GPHRequestType)type completionHandler:(void (^ _Nonnull)(NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Entry point into the Swift API.
SWIFT_CLASS("_TtC17GiphyPingbacksSDK18GPHPingbacksClient")
@interface GPHPingbacksClient : GPHPingbacksAbstractClient
/// Giphy API key.
@property (nonatomic, copy) NSString * _Nonnull apiKey;
/// Consumer user ID.
@property (nonatomic, copy) NSString * _Nonnull userId;
/// Initializer
/// \param apiKey Apps api-key to access end-points.
///
- (nonnull instancetype)initWithApiKey:(NSString * _Nonnull)apiKey OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents a Giphy URLRequest Type
typedef SWIFT_ENUM(NSInteger, GPHRequestType, closed) {
/// Pingback Request.
  GPHRequestTypePingback = 0,
};


SWIFT_CLASS("_TtC17GiphyPingbacksSDK14GiphyPingbacks")
@interface GiphyPingbacks : NSObject
+ (void)configureWithApiKey:(NSString * _Nonnull)apiKey;
/// Add additional headers parameters to any Pingback request.
/// If a key is already present the value will be added separated by comma.
/// \param parameters the custom headers dictionary.
///
+ (void)addAdditionalHeadersWithParameters:(NSDictionary<NSString *, NSString *> * _Nullable)parameters;
/// Generic Log Function to log pingbacks.
/// \param userId current users unique id.
///
/// \param loggedInUserId logged in users id.
///
/// \param responseId response id returned from api.
///
/// \param mediaId media id.
///
/// \param tid tactical id for revenue.
///
/// \param eventType Search|Trending|Related|Explore types.
///
/// \param actionType SEEN|HOVER|CLICK|SENT types.
///
/// \param sessionId string that describes a unique messaging thread in your platform. This can be any valid ASCII string, with any mix of characters, numbers, and special characters.
///
/// \param attributes List of dictionaries to allow custom extra parameters.
///
+ (void)logWithUserId:(NSString * _Nonnull)userId loggedInUserId:(NSString * _Nullable)loggedInUserId responseId:(NSString * _Nullable)responseId mediaId:(NSString * _Nonnull)mediaId tid:(NSString * _Nullable)tid eventType:(enum GPHEventType)eventType actionType:(enum GPHActionType)actionType sessionId:(NSString * _Nullable)sessionId attributes:(NSArray<NSDictionary<NSString *, NSString *> *> * _Nullable)attributes;
/// Flush Queue.
+ (void)flush;
+ (void)enableDebugLogging:(BOOL)enable;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable pingbacksId;)
+ (NSString * _Nullable)pingbacksId SWIFT_WARN_UNUSED_RESULT;
+ (void)setPingbacksId:(NSString * _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GiphyPingbacksSDK18PingbackCollection")
@interface PingbackCollection : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC17GiphyPingbacksSDK23PingbackSubmissionQueue")
@interface PingbackSubmissionQueue : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GiphyPingbacksSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC17GiphyPingbacksSDK9AdManager")
@interface AdManager : NSObject
+ (void)trackSeen:(NSArray<NSString *> * _Nullable)tags;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Action types. Must be Int so that it can be used in Objective-C.
typedef SWIFT_ENUM(NSInteger, GPHActionType, closed) {
  GPHActionTypeSeen = 0,
  GPHActionTypeHover = 1,
  GPHActionTypeClick = 2,
  GPHActionTypeSent = 3,
};

/// Action types. Must be Int so that it can be used in Objective-C.
typedef SWIFT_ENUM(NSInteger, GPHEventType, closed) {
  GPHEventTypeSearch = 0,
  GPHEventTypeTrending = 1,
  GPHEventTypeRelated = 2,
  GPHEventTypeExplore = 3,
  GPHEventTypeEmoji = 4,
  GPHEventTypeTextSearch = 5,
  GPHEventTypeTextTrending = 6,
};


/// Sub-classing Operation to make sure we manage its state correctly
SWIFT_CLASS("_TtC17GiphyPingbacksSDK25GPHPingbackAsyncOperation")
@interface GPHPingbackAsyncOperation : NSOperation
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface GPHPingbackAsyncOperation (SWIFT_EXTENSION(GiphyPingbacksSDK))
/// To handle KVO for ready state
@property (nonatomic, readonly, getter=isReady) BOOL ready;
/// To handle KVO for ready executing
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
/// To handle KVO for finished state
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
/// Override so we can claim to be async.
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
/// Override to manage the state correctly for async.
- (void)start;
/// Override to handle canceling so we can change the state to trigger KVO.
- (void)cancel;
@end


/// A specific type of async operation with a completion handler.
SWIFT_CLASS("_TtC17GiphyPingbacksSDK39GPHPingbackAsyncOperationWithCompletion")
@interface GPHPingbackAsyncOperationWithCompletion : GPHPingbackAsyncOperation
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Async Request Operations with Completion Handler Support
SWIFT_CLASS("_TtC17GiphyPingbacksSDK18GPHPingbackRequest")
@interface GPHPingbackRequest : GPHPingbackAsyncOperationWithCompletion
/// Override the Operation function main to handle the request
- (void)main;
@end

enum GPHRequestType : NSInteger;
@class NSURLResponse;

/// GIPHY Abstract API Client.
SWIFT_CLASS("_TtC17GiphyPingbacksSDK26GPHPingbacksAbstractClient")
@interface GPHPingbacksAbstractClient : NSObject
/// Giphy API key.
@property (nonatomic, copy) NSString * _Nullable _apiKey;
/// Giphy User Id.
@property (nonatomic, copy) NSString * _Nullable _userId;
/// Default timeout for network requests. Default: 10 seconds.
@property (nonatomic) NSTimeInterval timeout;
/// Network reachability status. Not supported in watchOS.
@property (nonatomic) BOOL useReachability;
/// Encode Strings for appending to URLs for endpoints like Term Suggestions/Categories
/// \param string String to be encoded.
///
///
/// returns:
/// A cancellable operation.
- (NSString * _Nonnull)encodedStringForUrl:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Perform a request
/// \param request URLRequest
///
/// \param type GPHRequestType to figure out what endpoint to hit
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)httpRequestWith:(NSURLRequest * _Nonnull)request type:(enum GPHRequestType)type completionHandler:(void (^ _Nonnull)(NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
/// Perform a request post data
/// \param request URLRequest
///
/// \param type GPHRequestType to figure out what endpoint to hit
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)postRequestWith:(NSURLRequest * _Nonnull)request type:(enum GPHRequestType)type completionHandler:(void (^ _Nonnull)(NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Entry point into the Swift API.
SWIFT_CLASS("_TtC17GiphyPingbacksSDK18GPHPingbacksClient")
@interface GPHPingbacksClient : GPHPingbacksAbstractClient
/// Giphy API key.
@property (nonatomic, copy) NSString * _Nonnull apiKey;
/// Consumer user ID.
@property (nonatomic, copy) NSString * _Nonnull userId;
/// Initializer
/// \param apiKey Apps api-key to access end-points.
///
- (nonnull instancetype)initWithApiKey:(NSString * _Nonnull)apiKey OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents a Giphy URLRequest Type
typedef SWIFT_ENUM(NSInteger, GPHRequestType, closed) {
/// Pingback Request.
  GPHRequestTypePingback = 0,
};


SWIFT_CLASS("_TtC17GiphyPingbacksSDK14GiphyPingbacks")
@interface GiphyPingbacks : NSObject
+ (void)configureWithApiKey:(NSString * _Nonnull)apiKey;
/// Add additional headers parameters to any Pingback request.
/// If a key is already present the value will be added separated by comma.
/// \param parameters the custom headers dictionary.
///
+ (void)addAdditionalHeadersWithParameters:(NSDictionary<NSString *, NSString *> * _Nullable)parameters;
/// Generic Log Function to log pingbacks.
/// \param userId current users unique id.
///
/// \param loggedInUserId logged in users id.
///
/// \param responseId response id returned from api.
///
/// \param mediaId media id.
///
/// \param tid tactical id for revenue.
///
/// \param eventType Search|Trending|Related|Explore types.
///
/// \param actionType SEEN|HOVER|CLICK|SENT types.
///
/// \param sessionId string that describes a unique messaging thread in your platform. This can be any valid ASCII string, with any mix of characters, numbers, and special characters.
///
/// \param attributes List of dictionaries to allow custom extra parameters.
///
+ (void)logWithUserId:(NSString * _Nonnull)userId loggedInUserId:(NSString * _Nullable)loggedInUserId responseId:(NSString * _Nullable)responseId mediaId:(NSString * _Nonnull)mediaId tid:(NSString * _Nullable)tid eventType:(enum GPHEventType)eventType actionType:(enum GPHActionType)actionType sessionId:(NSString * _Nullable)sessionId attributes:(NSArray<NSDictionary<NSString *, NSString *> *> * _Nullable)attributes;
/// Flush Queue.
+ (void)flush;
+ (void)enableDebugLogging:(BOOL)enable;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable pingbacksId;)
+ (NSString * _Nullable)pingbacksId SWIFT_WARN_UNUSED_RESULT;
+ (void)setPingbacksId:(NSString * _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GiphyPingbacksSDK18PingbackCollection")
@interface PingbackCollection : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC17GiphyPingbacksSDK23PingbackSubmissionQueue")
@interface PingbackSubmissionQueue : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GiphyPingbacksSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC17GiphyPingbacksSDK9AdManager")
@interface AdManager : NSObject
+ (void)trackSeen:(NSArray<NSString *> * _Nullable)tags;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Action types. Must be Int so that it can be used in Objective-C.
typedef SWIFT_ENUM(NSInteger, GPHActionType, closed) {
  GPHActionTypeSeen = 0,
  GPHActionTypeHover = 1,
  GPHActionTypeClick = 2,
  GPHActionTypeSent = 3,
};

/// Action types. Must be Int so that it can be used in Objective-C.
typedef SWIFT_ENUM(NSInteger, GPHEventType, closed) {
  GPHEventTypeSearch = 0,
  GPHEventTypeTrending = 1,
  GPHEventTypeRelated = 2,
  GPHEventTypeExplore = 3,
  GPHEventTypeEmoji = 4,
  GPHEventTypeTextSearch = 5,
  GPHEventTypeTextTrending = 6,
};


/// Sub-classing Operation to make sure we manage its state correctly
SWIFT_CLASS("_TtC17GiphyPingbacksSDK25GPHPingbackAsyncOperation")
@interface GPHPingbackAsyncOperation : NSOperation
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface GPHPingbackAsyncOperation (SWIFT_EXTENSION(GiphyPingbacksSDK))
/// To handle KVO for ready state
@property (nonatomic, readonly, getter=isReady) BOOL ready;
/// To handle KVO for ready executing
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
/// To handle KVO for finished state
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
/// Override so we can claim to be async.
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
/// Override to manage the state correctly for async.
- (void)start;
/// Override to handle canceling so we can change the state to trigger KVO.
- (void)cancel;
@end


/// A specific type of async operation with a completion handler.
SWIFT_CLASS("_TtC17GiphyPingbacksSDK39GPHPingbackAsyncOperationWithCompletion")
@interface GPHPingbackAsyncOperationWithCompletion : GPHPingbackAsyncOperation
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Async Request Operations with Completion Handler Support
SWIFT_CLASS("_TtC17GiphyPingbacksSDK18GPHPingbackRequest")
@interface GPHPingbackRequest : GPHPingbackAsyncOperationWithCompletion
/// Override the Operation function main to handle the request
- (void)main;
@end

enum GPHRequestType : NSInteger;
@class NSURLResponse;

/// GIPHY Abstract API Client.
SWIFT_CLASS("_TtC17GiphyPingbacksSDK26GPHPingbacksAbstractClient")
@interface GPHPingbacksAbstractClient : NSObject
/// Giphy API key.
@property (nonatomic, copy) NSString * _Nullable _apiKey;
/// Giphy User Id.
@property (nonatomic, copy) NSString * _Nullable _userId;
/// Default timeout for network requests. Default: 10 seconds.
@property (nonatomic) NSTimeInterval timeout;
/// Network reachability status. Not supported in watchOS.
@property (nonatomic) BOOL useReachability;
/// Encode Strings for appending to URLs for endpoints like Term Suggestions/Categories
/// \param string String to be encoded.
///
///
/// returns:
/// A cancellable operation.
- (NSString * _Nonnull)encodedStringForUrl:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Perform a request
/// \param request URLRequest
///
/// \param type GPHRequestType to figure out what endpoint to hit
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)httpRequestWith:(NSURLRequest * _Nonnull)request type:(enum GPHRequestType)type completionHandler:(void (^ _Nonnull)(NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
/// Perform a request post data
/// \param request URLRequest
///
/// \param type GPHRequestType to figure out what endpoint to hit
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)postRequestWith:(NSURLRequest * _Nonnull)request type:(enum GPHRequestType)type completionHandler:(void (^ _Nonnull)(NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Entry point into the Swift API.
SWIFT_CLASS("_TtC17GiphyPingbacksSDK18GPHPingbacksClient")
@interface GPHPingbacksClient : GPHPingbacksAbstractClient
/// Giphy API key.
@property (nonatomic, copy) NSString * _Nonnull apiKey;
/// Consumer user ID.
@property (nonatomic, copy) NSString * _Nonnull userId;
/// Initializer
/// \param apiKey Apps api-key to access end-points.
///
- (nonnull instancetype)initWithApiKey:(NSString * _Nonnull)apiKey OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents a Giphy URLRequest Type
typedef SWIFT_ENUM(NSInteger, GPHRequestType, closed) {
/// Pingback Request.
  GPHRequestTypePingback = 0,
};


SWIFT_CLASS("_TtC17GiphyPingbacksSDK14GiphyPingbacks")
@interface GiphyPingbacks : NSObject
+ (void)configureWithApiKey:(NSString * _Nonnull)apiKey;
/// Add additional headers parameters to any Pingback request.
/// If a key is already present the value will be added separated by comma.
/// \param parameters the custom headers dictionary.
///
+ (void)addAdditionalHeadersWithParameters:(NSDictionary<NSString *, NSString *> * _Nullable)parameters;
/// Generic Log Function to log pingbacks.
/// \param userId current users unique id.
///
/// \param loggedInUserId logged in users id.
///
/// \param responseId response id returned from api.
///
/// \param mediaId media id.
///
/// \param tid tactical id for revenue.
///
/// \param eventType Search|Trending|Related|Explore types.
///
/// \param actionType SEEN|HOVER|CLICK|SENT types.
///
/// \param sessionId string that describes a unique messaging thread in your platform. This can be any valid ASCII string, with any mix of characters, numbers, and special characters.
///
/// \param attributes List of dictionaries to allow custom extra parameters.
///
+ (void)logWithUserId:(NSString * _Nonnull)userId loggedInUserId:(NSString * _Nullable)loggedInUserId responseId:(NSString * _Nullable)responseId mediaId:(NSString * _Nonnull)mediaId tid:(NSString * _Nullable)tid eventType:(enum GPHEventType)eventType actionType:(enum GPHActionType)actionType sessionId:(NSString * _Nullable)sessionId attributes:(NSArray<NSDictionary<NSString *, NSString *> *> * _Nullable)attributes;
/// Flush Queue.
+ (void)flush;
+ (void)enableDebugLogging:(BOOL)enable;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable pingbacksId;)
+ (NSString * _Nullable)pingbacksId SWIFT_WARN_UNUSED_RESULT;
+ (void)setPingbacksId:(NSString * _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GiphyPingbacksSDK18PingbackCollection")
@interface PingbackCollection : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC17GiphyPingbacksSDK23PingbackSubmissionQueue")
@interface PingbackSubmissionQueue : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GiphyPingbacksSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC17GiphyPingbacksSDK9AdManager")
@interface AdManager : NSObject
+ (void)trackSeen:(NSArray<NSString *> * _Nullable)tags;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Action types. Must be Int so that it can be used in Objective-C.
typedef SWIFT_ENUM(NSInteger, GPHActionType, closed) {
  GPHActionTypeSeen = 0,
  GPHActionTypeHover = 1,
  GPHActionTypeClick = 2,
  GPHActionTypeSent = 3,
};

/// Action types. Must be Int so that it can be used in Objective-C.
typedef SWIFT_ENUM(NSInteger, GPHEventType, closed) {
  GPHEventTypeSearch = 0,
  GPHEventTypeTrending = 1,
  GPHEventTypeRelated = 2,
  GPHEventTypeExplore = 3,
  GPHEventTypeEmoji = 4,
  GPHEventTypeTextSearch = 5,
  GPHEventTypeTextTrending = 6,
};


/// Sub-classing Operation to make sure we manage its state correctly
SWIFT_CLASS("_TtC17GiphyPingbacksSDK25GPHPingbackAsyncOperation")
@interface GPHPingbackAsyncOperation : NSOperation
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface GPHPingbackAsyncOperation (SWIFT_EXTENSION(GiphyPingbacksSDK))
/// To handle KVO for ready state
@property (nonatomic, readonly, getter=isReady) BOOL ready;
/// To handle KVO for ready executing
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
/// To handle KVO for finished state
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
/// Override so we can claim to be async.
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
/// Override to manage the state correctly for async.
- (void)start;
/// Override to handle canceling so we can change the state to trigger KVO.
- (void)cancel;
@end


/// A specific type of async operation with a completion handler.
SWIFT_CLASS("_TtC17GiphyPingbacksSDK39GPHPingbackAsyncOperationWithCompletion")
@interface GPHPingbackAsyncOperationWithCompletion : GPHPingbackAsyncOperation
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Async Request Operations with Completion Handler Support
SWIFT_CLASS("_TtC17GiphyPingbacksSDK18GPHPingbackRequest")
@interface GPHPingbackRequest : GPHPingbackAsyncOperationWithCompletion
/// Override the Operation function main to handle the request
- (void)main;
@end

enum GPHRequestType : NSInteger;
@class NSURLResponse;

/// GIPHY Abstract API Client.
SWIFT_CLASS("_TtC17GiphyPingbacksSDK26GPHPingbacksAbstractClient")
@interface GPHPingbacksAbstractClient : NSObject
/// Giphy API key.
@property (nonatomic, copy) NSString * _Nullable _apiKey;
/// Giphy User Id.
@property (nonatomic, copy) NSString * _Nullable _userId;
/// Default timeout for network requests. Default: 10 seconds.
@property (nonatomic) NSTimeInterval timeout;
/// Network reachability status. Not supported in watchOS.
@property (nonatomic) BOOL useReachability;
/// Encode Strings for appending to URLs for endpoints like Term Suggestions/Categories
/// \param string String to be encoded.
///
///
/// returns:
/// A cancellable operation.
- (NSString * _Nonnull)encodedStringForUrl:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Perform a request
/// \param request URLRequest
///
/// \param type GPHRequestType to figure out what endpoint to hit
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)httpRequestWith:(NSURLRequest * _Nonnull)request type:(enum GPHRequestType)type completionHandler:(void (^ _Nonnull)(NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
/// Perform a request post data
/// \param request URLRequest
///
/// \param type GPHRequestType to figure out what endpoint to hit
///
/// \param completionHandler Completion handler to be notified of the request’s outcome.
///
///
/// returns:
/// A cancellable operation.
- (NSOperation * _Nonnull)postRequestWith:(NSURLRequest * _Nonnull)request type:(enum GPHRequestType)type completionHandler:(void (^ _Nonnull)(NSURLResponse * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Entry point into the Swift API.
SWIFT_CLASS("_TtC17GiphyPingbacksSDK18GPHPingbacksClient")
@interface GPHPingbacksClient : GPHPingbacksAbstractClient
/// Giphy API key.
@property (nonatomic, copy) NSString * _Nonnull apiKey;
/// Consumer user ID.
@property (nonatomic, copy) NSString * _Nonnull userId;
/// Initializer
/// \param apiKey Apps api-key to access end-points.
///
- (nonnull instancetype)initWithApiKey:(NSString * _Nonnull)apiKey OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents a Giphy URLRequest Type
typedef SWIFT_ENUM(NSInteger, GPHRequestType, closed) {
/// Pingback Request.
  GPHRequestTypePingback = 0,
};


SWIFT_CLASS("_TtC17GiphyPingbacksSDK14GiphyPingbacks")
@interface GiphyPingbacks : NSObject
+ (void)configureWithApiKey:(NSString * _Nonnull)apiKey;
/// Add additional headers parameters to any Pingback request.
/// If a key is already present the value will be added separated by comma.
/// \param parameters the custom headers dictionary.
///
+ (void)addAdditionalHeadersWithParameters:(NSDictionary<NSString *, NSString *> * _Nullable)parameters;
/// Generic Log Function to log pingbacks.
/// \param userId current users unique id.
///
/// \param loggedInUserId logged in users id.
///
/// \param responseId response id returned from api.
///
/// \param mediaId media id.
///
/// \param tid tactical id for revenue.
///
/// \param eventType Search|Trending|Related|Explore types.
///
/// \param actionType SEEN|HOVER|CLICK|SENT types.
///
/// \param sessionId string that describes a unique messaging thread in your platform. This can be any valid ASCII string, with any mix of characters, numbers, and special characters.
///
/// \param attributes List of dictionaries to allow custom extra parameters.
///
+ (void)logWithUserId:(NSString * _Nonnull)userId loggedInUserId:(NSString * _Nullable)loggedInUserId responseId:(NSString * _Nullable)responseId mediaId:(NSString * _Nonnull)mediaId tid:(NSString * _Nullable)tid eventType:(enum GPHEventType)eventType actionType:(enum GPHActionType)actionType sessionId:(NSString * _Nullable)sessionId attributes:(NSArray<NSDictionary<NSString *, NSString *> *> * _Nullable)attributes;
/// Flush Queue.
+ (void)flush;
+ (void)enableDebugLogging:(BOOL)enable;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nullable pingbacksId;)
+ (NSString * _Nullable)pingbacksId SWIFT_WARN_UNUSED_RESULT;
+ (void)setPingbacksId:(NSString * _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GiphyPingbacksSDK18PingbackCollection")
@interface PingbackCollection : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC17GiphyPingbacksSDK23PingbackSubmissionQueue")
@interface PingbackSubmissionQueue : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#endif
